{"version":3,"sources":["pages/invoice-demo.js"],"names":["InvoiceDemo","_classCallCheck","this","worker","init","generateInvoice","handleUpdate","handleDownload","html2pdf","element","document","getElementById","$element","$","$wrapper","parent","filename","data","$img","from","toImg","then","css","prop","img","src","addClass","concat","outerWidth","append","toPdf","save","_this","$invoice","on","e","$invoiceImg","find","remove","_this2","preventDefault","savePdf"],"mappings":"uZAGMA,uBAEJ,SAAAA,IAAeC,gBAAAC,KAAAF,GACbE,KAAKC,OAAS,GAEdD,KAAKE,2DAMLF,KAAKG,kBACLH,KAAKI,eACLJ,KAAKK,2DAIL,IAAMJ,EAASK,WACTC,EAAUC,SAASC,eAAe,WAClCC,EAAWC,EAAEJ,GACbK,EAAWF,EAASG,SACpBC,EAAWJ,EAASK,KAAK,MACzBC,EAAOL,EAAE,WAEfV,EACGgB,KAAKV,GACLW,QACAC,KAAK,WACJT,EAASU,IAAI,UAAW,QAExBJ,EACGK,KAAK,MAAOP,GACZO,KAAK,MAAOpB,EAAOoB,KAAKC,IAAIC,KAC5BC,SAAS,eACTJ,IAAI,YAJP,GAAAK,OAIuBf,EAASgB,aAJhC,OAMAd,EAASe,OAAOX,KAGpBhB,KAAKC,OAASA,oCAId,IAAMM,EAAUC,SAASC,eAAe,WAClCK,EAAWH,EAAEJ,GAASQ,KAAK,MAEjCf,KAAKC,OACAgB,KAAKV,GACLqB,QACAC,KAAKf,0CAOI,IAAAgB,EAAA9B,KACR+B,EAAWpB,EAAE,YAEnBA,EAAE,mBAAmBqB,GAAG,QAAS,SAAAC,GAC/B,IAAMC,EAAcvB,EAAE,gBAGtBoB,EACGX,IAAI,UAAW,IACfe,KAAK,iBACLR,OAAO,UAEVO,EAAYE,SAEZN,EAAK3B,6DAIS,IAAAkC,EAAArC,KAChBW,EAAE,iBAAiBqB,GAAG,QAAS,SAAAC,GAC7BA,EAAEK,iBAEFD,EAAKE,qBAUX5B,EAAEH,UAAUwB,GAAG,aAAc,WAC3B,IAAIlC","file":"../../javascript/pages/invoice-demo.min.js","sourcesContent":["// Invoice Demo\n// =============================================================\n\nclass InvoiceDemo {\n\n  constructor () {\n    this.worker = ''\n\n    this.init()\n  }\n\n  init () {\n\n    // event handlers\n    this.generateInvoice()\n    this.handleUpdate()\n    this.handleDownload()\n  }\n\n  generateInvoice () {\n    const worker = html2pdf()\n    const element = document.getElementById('invoice')\n    const $element = $(element)\n    const $wrapper = $element.parent()\n    const filename = $element.data('id')\n    const $img = $('<img />')\n\n    worker\n      .from(element)\n      .toImg()\n      .then(() => {\n        $element.css('display', 'none')\n\n        $img\n          .prop('alt', filename)\n          .prop('src', worker.prop.img.src)\n          .addClass('invoice-img')\n          .css('max-width', `${$element.outerWidth()}px`)\n\n        $wrapper.append($img)\n      })\n\n    this.worker = worker\n  }\n\n  savePdf () {\n    const element = document.getElementById('invoice')\n    const filename = $(element).data('id')\n\n    this.worker\n        .from(element)\n        .toPdf()\n        .save(filename)\n  }\n\n  /**\n   * Please Add `<button id=\"update-invoice\" class=\"btn btn-secondary\">Update</button>`\n   * into `page-invoice.html` to see a demo of how to add content dynamically.\n   */\n  handleUpdate () {\n    const $invoice = $('#invoice')\n\n    $('#update-invoice').on('click', e => {\n      const $invoiceImg = $('.invoice-img')\n      // simute for changes\n      // update invoice content\n      $invoice\n        .css('display', '')\n        .find('.invoice-body')\n        .append('<hr />')\n      // remove existing invoice\n      $invoiceImg.remove()\n      // generate new invoice\n      this.generateInvoice()\n    })\n  }\n\n  handleDownload () {\n    $('#download-pdf').on('click', e => {\n      e.preventDefault()\n\n      this.savePdf()\n    })\n  }\n}\n\n\n/**\n * Keep in mind that your scripts may not always be executed after the theme is completely ready,\n * you might need to observe the `theme:load` event to make sure your scripts are executed after the theme is ready.\n */\n$(document).on('theme:init', () => {\n  new InvoiceDemo()\n})\n"]}